import pprint
import numpy as np
# from array import array
from vesa import *
from numpy import array



def read_bd():
    with open("bd.txt", "r") as f:
        a = f.read()
    # for i in a.split("\n")[:-1]:
    #     k = i.split()
    #     print(k[0], k[1])
    return [i.split() for i in a.split("\n")[:-1]]


def rod(n, flag=False):
    try:
        a = n[0][1]
        s = [rod(i[1], flag) for i in n]
        return s
    except:
        if flag:
            n = n * 15
            n = str(n).split(".")[0]
            return float(n)
        else:
            return n


def ney4(inp_i, goal_pred_i, n, vesa=list(), alpha=0.00003, ney=9):
    dub = 0
    alpha = alpha / (10 ** ney)
    lerror = 0
    if len(vesa) != 0:
        weight_1_2 = vesa[0]
        weight_2_3 = vesa[1]
        weight_3_4 = vesa[2]
        weight_4_5 = vesa[3]
        weight_5_6 = vesa[4]
        weight_6_7 = vesa[5]
        weight_7_8 = vesa[6]
        weight_8_9 = vesa[7]
        weight_9_10 = vesa[8]
    else:
        weight_1_2 = np.random.randn(9, 9)
        weight_2_3 = np.random.randn(9, 9)
        weight_3_4 = np.random.randn(9, 9)
        weight_4_5 = np.random.randn(9, 9)
        weight_5_6 = np.random.randn(9, 9)
        weight_6_7 = np.random.randn(9, 9)
        weight_7_8 = np.random.randn(9, 9)
        weight_8_9 = np.random.randn(9, 9)
        weight_9_10 = np.random.randn(9, 1)
    # print(weight_)
    # print(weight_1_2, weight_2_3, weight_3_4, weight_4_5, sep="\n\n")
    for iteration in range(n):
        for i in range(len(inp_i)):
            inp = inp_i[i]
            goal_pred = goal_pred_i[i]

            layer_2 = np.dot(inp, weight_1_2)
            layer_3 = np.dot(layer_2, weight_2_3)
            layer_4 = np.dot(layer_3, weight_3_4)
            layer_5 = np.dot(layer_4, weight_4_5)
            layer_6 = np.dot(layer_5, weight_5_6)
            layer_7 = np.dot(layer_6, weight_6_7)
            layer_8 = np.dot(layer_7, weight_7_8)
            layer_9 = np.dot(layer_8, weight_8_9)
            # print(layer_2)
            # exit()
            # if dub != 2:
            #     dub += 1
            # else:
            #     print(weight_1_2)
            #     exit()
            pred = np.sum(np.dot(layer_9, weight_9_10))
            # print(pred)
            # if iteration % 100 == 0:
            #     if pred <= 0.5:
            #         print("It is a - setosa", goal_pred, pred)
            #     elif pred > 0.7 and pred <= 1.5:
            #         print("It is a - versicolor", goal_pred, pred)
            #     elif pred > 1.7 and pred <= 2.5:
            #         print("It is a - virginica", goal_pred, pred)
            #     else:
            #         print("I dont know", goal_pred, pred)

            error = (pred - goal_pred) ** 2

            layer_10_delta = pred - goal_pred
            layer_9_delta = np.sum(np.dot(layer_10_delta, weight_9_10))
            layer_8_delta = np.sum(np.dot(layer_9_delta, weight_8_9))
            layer_7_delta = np.sum(np.dot(layer_8_delta, weight_7_8))
            layer_6_delta = np.sum(np.dot(layer_7_delta, weight_6_7))
            layer_5_delta = np.sum(np.dot(layer_6_delta, weight_5_6))
            layer_4_delta = np.sum(np.dot(layer_5_delta, weight_4_5))
            layer_3_delta = np.sum(np.dot(layer_4_delta, weight_3_4))
            layer_2_delta = np.sum(np.dot(layer_3_delta, weight_2_3))


            weight_delta_1_2 = np.zeros(weight_1_2.shape)
            weight_delta_2_3 = np.zeros(weight_2_3.shape)
            weight_delta_3_4 = np.zeros(weight_3_4.shape)
            weight_delta_4_5 = np.zeros(weight_4_5.shape)
            weight_delta_5_6 = np.zeros(weight_5_6.shape)
            weight_delta_6_7 = np.zeros(weight_6_7.shape)
            weight_delta_7_8 = np.zeros(weight_7_8.shape)
            weight_delta_8_9 = np.zeros(weight_8_9.shape)
            weight_delta_9_10 = np.zeros(weight_9_10.shape)

            # ----------------

            for k in range(len(weight_delta_1_2)):
                for j in range(len(weight_delta_1_2[k])):
                    weight_delta_1_2[k][j] = inp[k] * layer_2_delta
            # print(weight_delta_2_3)
            # exit()
            for k in range(len(weight_delta_2_3)):
                for j in range(len(weight_delta_2_3[k])):
                    weight_delta_2_3[k][j] = np.sum(layer_2.T[j]) * layer_3_delta

            for k in range(len(weight_delta_3_4)):
                for j in range(len(weight_delta_3_4[k])):
                    weight_delta_3_4[k][j] = np.sum(layer_3.T[j]) * layer_4_delta

            for k in range(len(weight_delta_4_5)):
                for j in range(len(weight_delta_4_5[k])):
                    weight_delta_4_5[k][j] = np.sum(layer_4.T[j]) * layer_5_delta

            for k in range(len(weight_delta_5_6)):
                for j in range(len(weight_delta_5_6[k])):
                    weight_delta_5_6[k][j] = np.sum(layer_5.T[j]) * layer_6_delta

            for k in range(len(weight_delta_6_7)):
                for j in range(len(weight_delta_6_7[k])):
                    weight_delta_6_7[k][j] = np.sum(layer_6.T[j]) * layer_7_delta

            for k in range(len(weight_delta_7_8)):
                for j in range(len(weight_delta_7_8[k])):
                    weight_delta_7_8[k][j] = np.sum(layer_7.T[j]) * layer_8_delta

            for k in range(len(weight_delta_8_9)):
                for j in range(len(weight_delta_8_9[k])):
                    weight_delta_8_9[k][j] = np.sum(layer_8.T[j]) * layer_9_delta

            # ----------------

            for k in range(len(weight_delta_9_10)):
                weight_delta_9_10[k] = np.sum(layer_9.T[k]) * layer_10_delta


            # ----------------
            # ----------------

            for k in range(len(weight_1_2)):
                for j in range(len(weight_1_2)):
                    weight_1_2[k][j] -= weight_delta_1_2[k][j] * alpha

            for k in range(len(weight_2_3)):
                for j in range(len(weight_2_3)):
                    weight_2_3[k][j] -= weight_delta_2_3[k][j] * alpha

            for k in range(len(weight_3_4)):
                for j in range(len(weight_3_4)):
                    weight_3_4[k][j] -= weight_delta_3_4[k][j] * alpha

            for k in range(len(weight_4_5)):
                for j in range(len(weight_4_5)):
                    weight_4_5[k][j] -= weight_delta_4_5[k][j] * alpha

            for k in range(len(weight_5_6)):
                for j in range(len(weight_5_6)):
                    weight_5_6[k][j] -= weight_delta_5_6[k][j] * alpha

            for k in range(len(weight_6_7)):
                for j in range(len(weight_6_7)):
                    weight_6_7[k][j] -= weight_delta_6_7[k][j] * alpha

            for k in range(len(weight_7_8)):
                for j in range(len(weight_7_8)):
                    weight_7_8[k][j] -= weight_delta_7_8[k][j] * alpha

            for k in range(len(weight_8_9)):
                for j in range(len(weight_8_9)):
                    weight_8_9[k][j] -= weight_delta_8_9[k][j] * alpha

            # ----------------

            for k in range(len(weight_9_10)):
                weight_9_10[k] -= weight_delta_9_10[k] * alpha
            # print(weight_delta_3_4)
            # exit()
            # ----------------

        print(iteration, error, sep=(" --- " if error < lerror else " +++ "))
        lerror = error
    return [weight_1_2, weight_2_3, weight_3_4, weight_4_5, weight_5_6, weight_6_7, weight_7_8, weight_8_9, weight_9_10]


s = [[int(i[0]), float(i[1])] for i in read_bd()]
s.sort()
# pprint.pprint(s)
bd = list()
a_bd = list()
for i in range(0, len(s) // 2 * 2):
    if s[i][0] - s[i - 2][0] == 2 and \
            s[i - 2][0] - s[i - 4][0] == 1 and \
            s[i - 4][0] - s[i - 6][0] == 2 and \
            s[i - 6][0] - s[i - 8][0] == 2 and \
            s[i - 8][0] - s[i - 10][0] == 2 and \
            s[i - 10][0] - s[i - 12][0] == 2 and \
            s[i - 12][0] - s[i - 14][0] == 2 and \
            s[i - 14][0] - s[i - 16][0] == 2 and \
            s[i - 16][0] - s[i - 18][0] == 2:
        a = False
        # print(i, i - 1)
        num, snum = rod(s[i][1], a), rod([s[i - 2][1], s[i - 4][1], s[i - 6][1], s[i - 8][1], s[i - 10][1], s[i - 12][1], s[i - 14][1], s[i - 16][1], s[i - 18][1]], a)
        bd.append(snum)
        a_bd.append(num)

# print(a_bd[0])
# print(bd[0])

def go_ney(ves, inp):
    weight_1_2, weight_2_3, weight_3_4, weight_4_5, weight_5_6, weight_6_7, weight_7_8, weight_8_9, weight_9_10 = ves[0], ves[1], ves[2], ves[3], ves[4], ves[5], ves[6], ves[7], ves[8]
    layer_2 = np.dot(inp, weight_1_2)
    layer_3 = np.dot(layer_2, weight_2_3)
    layer_4 = np.dot(layer_3, weight_3_4)
    layer_5 = np.dot(layer_4, weight_4_5)
    layer_6 = np.dot(layer_5, weight_5_6)
    layer_7 = np.dot(layer_6, weight_6_7)
    layer_8 = np.dot(layer_7, weight_7_8)
    layer_9 = np.dot(layer_8, weight_8_9)
    pred = np.sum(np.dot(layer_9, weight_9_10))
    return pred


# k = 200
# pred, grod = go_ney(ves1, bd[k]), a_bd[k]
# print(rod(pred, True), rod(grod, True))


# count = 0
# for i in range(len(bd)):
#     pred, grod = go_ney(ves3, bd[i]), a_bd[i]
#     if rod(pred, True) == rod(grod, True):
#         count += 1
#
# print(count / len(bd) * 100)

g = [array([[-1.07809324, -0.11851882, -0.27156772,  0.14628424,  0.86993665,
         0.72794088,  0.0585627 ,  0.45192773,  0.25693926],
       [ 0.99886616, -0.25370957,  0.02573224, -0.23353139,  0.13914921,
         2.43976548, -2.01346442,  1.06446761,  0.46614503],
       [ 0.30885563, -0.96991262,  0.37668246,  0.52394754, -0.77927918,
         1.41313484, -0.14590673,  0.68947356,  1.49717969],
       [ 0.33939614,  1.05972011,  0.5417106 ,  1.07046179,  0.98183342,
        -0.26522747,  0.8864173 ,  0.82277429,  0.42523682],
       [ 0.14285405,  0.74724515,  0.01865014,  0.32889076, -0.9642648 ,
        -0.18142379, -1.32341236, -0.26704588,  0.34172728],
       [ 1.05464399,  1.84441033,  0.25864571, -0.40738188, -0.27797739,
        -0.50765136, -0.02706722, -0.44188995,  1.12861821],
       [-0.4849429 , -1.33610905, -0.98329002,  1.06032596,  0.6391059 ,
         2.07808767, -0.24209753, -0.15856548,  0.03542919],
       [ 1.64761239,  1.75905364,  1.3575787 , -0.02281432, -0.95398898,
         1.00545417, -0.83555992,  0.83473762,  0.63904659],
       [-0.52536316,  0.23012366, -1.61761084, -0.47023666,  0.08721973,
         0.69577362,  1.52856762, -0.73159386, -1.48760519]]), array([[-1.35407208, -0.41137664,  1.92100976, -0.19705305,  0.57294686,
        -1.2153297 ,  0.0056201 ,  1.72755678,  0.39524903],
       [ 2.42661545,  0.73890492,  0.11812296, -0.04641111, -1.40209357,
         0.61077017, -0.00799711,  0.2245399 , -0.44203586],
       [ 0.17139253, -1.21079498, -0.62556491,  1.13751163,  0.08001655,
         0.13258005,  0.60615196,  1.8605567 ,  0.08706919],
       [-1.19285172, -0.65499766, -0.21044561,  0.77259134, -0.58139361,
        -0.62835522,  0.73273513,  1.08888104,  0.69087217],
       [-1.68521056, -1.0610743 , -2.00891028, -0.08836684,  0.4101345 ,
         2.41944075,  0.0035514 ,  0.09391006,  0.18116053],
       [ 0.46391158, -0.1881361 , -2.06557884,  0.17853024, -0.89708269,
         0.4822897 , -0.04033222, -0.18966838,  0.50765657],
       [ 0.40614016,  0.18406423,  1.94492324,  2.06582007,  1.66916685,
        -0.01145599,  0.61803629,  0.01922563,  0.19950009],
       [ 0.29756183, -1.30688925,  1.75000185,  1.10480878, -0.13469429,
         1.60921746,  0.85029282,  0.13478649, -0.18984805],
       [ 1.54687508,  0.71217617, -0.28723565, -1.3582876 , -0.55485833,
         0.86634005, -0.79852673, -0.30347123, -0.38324771]]), array([[-2.97153665e-01,  2.69697943e-02, -1.90043551e+00,
        -5.93281531e-01,  1.58616540e+00,  1.00203143e+00,
        -1.15443108e+00, -6.99714181e-01, -3.56567547e-02],
       [ 4.54112930e-01, -2.27687430e+00, -9.48863693e-01,
        -1.73339742e+00,  1.54686628e+00, -9.62150211e-02,
         9.85456862e-01,  7.32213913e-02,  6.09747326e-01],
       [ 1.26203864e+00, -3.92410871e-01,  1.01854989e+00,
         7.20015320e-01,  2.96815118e-02,  7.22845137e-01,
         3.61316966e-01, -5.03575570e-01,  6.78591149e-01],
       [ 8.44234097e-02, -3.30295877e-01,  1.53731785e+00,
         1.21933408e+00, -1.52963822e+00, -6.41718203e-01,
         5.22796728e-01, -1.44473889e+00,  5.71789802e-01],
       [-8.64843323e-01, -1.57971832e-01, -1.60408563e+00,
         3.16362028e-01, -3.73343763e-01,  8.55016839e-01,
        -3.22652391e-01, -4.60667771e-01,  9.63444103e-01],
       [ 8.53987914e-01, -6.51581653e-02, -1.99172744e-01,
        -3.20639996e-01,  7.42895797e-05, -6.78980019e-01,
         4.37152287e-01,  4.85188348e-01, -5.42098714e-01],
       [-1.04492699e-01, -7.10290724e-01,  1.28449237e-01,
         2.52742684e-02,  1.39560621e+00, -1.70997515e+00,
         6.49892149e-01,  6.76692906e-01,  1.58813391e+00],
       [ 9.06504683e-01, -4.40510306e-01,  1.76907316e-01,
        -8.90620020e-01,  4.69119298e-01,  1.10921070e+00,
         5.77092787e-01,  2.42741726e-01, -2.36494198e+00],
       [ 2.05631948e+00,  9.74961583e-01,  9.75511028e-01,
        -1.91831430e+00,  1.49839471e-02, -4.80609527e-01,
        -9.68721189e-01, -9.78243898e-01,  8.58696849e-01]]), array([[-1.74652607,  0.4152952 , -1.52377022,  1.29148573, -0.93976831,
        -0.25757268, -0.95894107,  1.92956104, -0.70316079],
       [ 0.33398329,  0.54500164, -0.03610371, -0.10014853,  0.04892428,
         1.2777093 ,  0.42933532,  0.39290829,  0.92967849],
       [-0.07543791,  0.76375173,  0.835661  , -1.42843036, -0.07723662,
        -0.08264883, -1.06464261,  0.46650299, -2.05513541],
       [ 0.88992233,  2.04433283, -2.73107185, -0.29615787,  0.31286836,
        -0.9225406 , -0.31864556,  0.36315623, -0.7768269 ],
       [-0.4627709 ,  1.02254608,  1.28437972,  1.62630554,  0.03349687,
         1.00291481, -0.62317745, -0.65590387,  1.07200164],
       [ 0.59401959,  2.46744678, -0.28439202, -2.07717933,  0.92649635,
         0.07834909, -0.97853132, -0.70672997,  2.83960389],
       [-0.59684319, -1.40336865, -0.23337052, -1.26853925,  0.01900326,
         0.67170034,  0.86738948,  0.47431629, -0.5331585 ],
       [-2.02239431,  1.84346333,  0.35621985, -0.1571884 , -1.92585836,
         0.86206926, -0.08864322,  0.07340681, -0.66065675],
       [ 0.77806889, -1.32474256, -0.08664608, -1.51351198, -0.43326035,
         0.44360164,  2.16559998,  0.56131769,  0.52505625]]), array([[ 0.03408419, -0.11169799,  0.64699352, -0.87679131,  0.39736477,
        -1.67605988, -0.31669304,  0.22112108,  1.10283472],
       [-0.43809488,  0.16990161, -1.23998368,  0.51319205,  1.24267789,
         0.78628713, -2.02839711, -1.49161669, -0.53302014],
       [-0.50853116,  1.09592112,  0.44848655,  0.30883331,  0.26043528,
        -0.90300348,  1.89718181,  1.64404507,  0.35171071],
       [ 1.37810195,  0.18465933, -1.21024241,  0.85290572, -1.15925155,
         0.13351924, -0.30225632,  1.34590645, -0.7342579 ],
       [ 0.43057112,  0.30316158, -0.13058034, -2.42001203,  0.10028671,
         0.13166342,  0.09236774, -0.82563874,  1.09447033],
       [ 0.96471447, -0.28525184, -0.03047099,  1.68227431,  0.12569738,
         0.64769981,  1.12426091,  0.2438429 ,  1.61049752],
       [ 1.12185417, -0.59235844, -0.17993133, -0.79081199, -1.30918669,
         1.30381544, -0.31171829,  1.0002051 , -0.42159851],
       [-0.08905767,  0.59091819, -0.39791371, -0.62472123, -0.7013914 ,
        -1.39414606, -0.28601379,  0.62338908, -0.004393  ],
       [-1.39796774,  0.94050017, -0.4664038 , -0.23580707,  0.49435592,
         0.36139661, -0.62189098,  0.26068158,  2.32566487]]), array([[-1.8645495 ,  0.21826375, -1.04912701,  0.09175004,  0.80254244,
        -2.19237333, -1.72247301,  0.41893621, -0.39781677],
       [-1.21451883, -0.21769586, -1.0293992 , -1.19413704,  0.05719207,
        -0.51673954,  1.00074094, -1.0229695 ,  0.55406972],
       [ 0.37221639, -0.57443014, -0.98515768, -0.38890883,  0.48249048,
         0.4518316 , -0.36245155, -0.15918743, -1.87917992],
       [-0.04577216,  0.21432436,  0.34239083, -0.98650204,  0.65755982,
        -1.89056419,  0.86737274, -0.45695946, -0.83966702],
       [-0.20480234,  0.83168089,  0.50845693, -1.63864694,  1.60097192,
         0.44724839,  0.37608001, -0.92145539,  0.7098947 ],
       [-0.83612468,  1.85012409, -0.54899387,  0.08371362, -1.4727119 ,
        -0.03279259, -0.518685  ,  0.9317558 , -1.19591489],
       [ 1.23101514, -0.49609681,  0.52052587,  0.04028474,  0.54235219,
        -0.7989498 , -1.10140914, -1.28533131,  0.55983475],
       [ 0.95814199,  0.23644644, -2.05484677, -0.57839029, -0.32901833,
        -1.44192444,  0.30429442, -0.3974735 ,  0.21834761],
       [ 0.40293219,  0.50319167,  1.85715398, -1.05129761, -1.81889892,
         1.06324712, -0.5081466 , -0.01133316,  1.93250843]]), array([[ 0.84510656,  2.20038399, -0.2405235 , -0.06936497, -0.03518175,
         0.44112871, -0.22193953,  0.13238445, -1.41757072],
       [-1.14051526,  0.69929525, -2.04460608, -0.15949505, -0.06825104,
         0.930527  ,  1.00998017, -0.47699299, -1.02368449],
       [-0.84049906,  0.54649798, -0.77631776, -0.44861721,  0.23719768,
         0.29012221,  1.20490225, -0.43233584, -0.52114086],
       [ 0.4740034 ,  0.6516434 ,  0.38432317,  0.24441215, -1.15440949,
         1.01603312, -1.43040011,  0.5778987 ,  0.18528518],
       [ 1.1099942 ,  1.11679269,  0.73390566, -1.31164156,  1.16197289,
         0.952566  ,  0.07548488, -2.01943462,  1.05946835],
       [ 0.20237075, -1.02168148, -0.53916247,  0.54730352, -1.61744673,
        -0.74416918,  0.92998009, -0.14639453,  0.59853306],
       [-0.12899003, -0.30849376,  0.12809328, -0.51435839,  0.37460147,
         0.51731881, -0.49971152,  0.95916896,  2.18851294],
       [-0.34419071, -1.04352294, -0.34568007, -1.72570962, -0.39479889,
         0.95392123,  1.27783349,  2.52319812, -0.1189334 ],
       [-0.90518693, -0.67329614, -0.53051614, -0.47162897,  0.75289632,
        -0.55611704, -0.29381096, -0.14064511,  0.41895463]]), array([[ 0.10269469, -0.81439896,  2.16076599,  0.10411248, -0.92458663,
         0.11593376,  1.91978805,  0.60650689, -0.19421006],
       [ 0.37355121, -1.22772597, -0.77702905,  1.62588022, -2.55560593,
        -1.58918257, -0.45814717,  0.68733351, -0.18431104],
       [-0.10354187, -1.75080195, -0.54666349, -0.20065483, -0.640701  ,
        -0.45289772, -0.52954014,  1.01503374,  0.17157988],
       [-1.10146852, -0.29268082,  0.52405202,  0.45669125, -1.37464593,
         0.17182957,  2.49028174,  1.59146992,  0.9653973 ],
       [ 0.04326756, -0.79009888,  0.56595281,  0.67648419, -1.40695356,
        -1.00435781,  1.96292459, -0.45213546, -0.33290927],
       [ 1.14143502,  0.8335289 ,  0.89956445,  0.01122627,  0.20582311,
         0.56297722,  0.54523755, -0.57869455,  0.88734243],
       [-0.66059166,  0.17541458, -1.23049928,  0.10726677,  0.05541979,
        -0.36398658,  1.11252589,  0.78853813,  0.20946238],
       [ 0.16229246, -0.687036  ,  1.22365615,  1.0764338 , -1.60375333,
         0.64818936,  2.16548476, -1.95136888,  0.04446675],
       [-0.07326307, -2.26111624,  1.33734859,  0.67813927, -1.16628759,
        -1.0045117 ,  0.96722196,  0.25201871, -1.96626455]]), array([[-1.06527148],
       [ 0.39608583],
       [ 1.42066139],
       [-1.84794325],
       [-0.85702412],
       [-0.45298108],
       [-0.45596853],
       [ 0.49987772],
       [-0.26604954]])]
# print(a_bd[0])
# print(bd[0])
print(ney4(bd, a_bd, 100, alpha=0.01, ney=9, vesa=g))


# 0.09463996079259564
# 0.09492957135325965
